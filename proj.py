# -*- coding: utf-8 -*-
"""Proj.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aS6CfRlYQ_587C4g9jRP4572cTL-3SCD
"""

pip

pip install plotly

pip install neuralprophet

import pandas as pd
from neuralprophet import NeuralProphet
from matplotlib import pyplot as plt
import pickle

df = pd.read_csv('/Users/rishis/Downloads/IndianWeatherRepository.csv')

df.head()

df.location_name.unique

df.columns

df.region.unique

df.last_updated.unique

selected_location = 'Ashoknagar'

selected_data = df[df['location_name'] == selected_location].copy()

selected_data['ds'] = pd.to_datetime(selected_data['last_updated'])

selected_data.drop('last_updated', axis=1, inplace=True)

plt.figure(figsize=(14, 6))
plt.plot(selected_data['ds'], selected_data['temperature_celsius'], label='Original Data')
plt.title(f'Original Temperature Data for {selected_location}')
plt.xlabel('Date')
plt.ylabel('Temperature (Celsius)')
plt.legend()
plt.show()

selected_data = selected_data[selected_data['ds'].dt.year.isin([2023, 2024])]

plt.figure(figsize=(14, 6))
plt.plot(selected_data['ds'], selected_data['temperature_celsius'], label='Filtered Data')
plt.title(f'Filtered Temperature Data for {selected_location} (Years 2023-2024)')
plt.xlabel('Date')
plt.ylabel('Temperature (Celsius)')
plt.legend()
plt.show()

print(selected_data.head())

selected_location = 'Ashoknagar'

selected_data = df[df['location_name'] == selected_location].copy()

selected_data['ds'] = pd.to_datetime(selected_data['last_updated'])

selected_data.drop('last_updated', axis=1, inplace=True)

selected_data.dropna(inplace=True)

plt.figure(figsize=(14, 6))
plt.plot(selected_data['ds'], selected_data['temperature_celsius'], label='Original Data')
plt.title(f'Original Temperature Data for {selected_location}')
plt.xlabel('Date')
plt.ylabel('Temperature (Celsius)')
plt.legend()
plt.show()

selected_data.rename(columns={'temperature_celsius': 'y'}, inplace=True)

selected_data.drop(['wind_mph', 'wind_kph', 'wind_degree', 'wind_direction', 'pressure_mb', 'pressure_in', 'precip_mm', 'precip_in', 'humidity', 'cloud', 'feels_like_celsius', 'feels_like_fahrenheit', 'visibility_km', 'visibility_miles', 'uv_index', 'gust_mph', 'gust_kph', 'air_quality_Carbon_Monoxide', 'air_quality_Ozone', 'air_quality_Nitrogen_dioxide', 'air_quality_Sulphur_dioxide', 'air_quality_PM2.5', 'air_quality_PM10', 'air_quality_us-epa-index', 'air_quality_gb-defra-index', 'sunrise', 'sunset', 'moonrise', 'moonset', 'moon_phase', 'moon_illumination'], axis=1, inplace=True)

m = NeuralProphet()
model = m.fit(selected_data, freq='H', epochs=1000)

future = m.make_future_dataframe(selected_data, periods=900)
forecast = m.predict(future)

plt.figure(figsize=(14, 6))
plt.plot(forecast['ds'], forecast['yhat1'], label='Forecasted Data')
plt.title(f'Forecast for {selected_location}')
plt.xlabel('Date')
plt.ylabel('Temperature (Celsius)')
plt.legend()
plt.show()

